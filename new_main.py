"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª RAG —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞
–°–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –≤–º–µ—Å—Ç–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
"""

import os
import sys
import logging
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))

from config.config_loader import load_config
from services.knowledge_processing import KnowledgeProcessor
from services.query_processing import QueryProcessor


def setup_logging(config):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    log_config = config.get('logging', {})
    level = getattr(logging, log_config.get('level', 'INFO'))
    format_str = log_config.get('format', '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    logging.basicConfig(
        level=level,
        format=format_str,
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('rag_system.log', encoding='utf-8')
        ]
    )


def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    import subprocess
    
    print("üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...")
    
    try:
        result = subprocess.run(['python', '-m', 'pytest', 'tests/', '-v'], 
                              capture_output=True, text=True)
        
        print("–í—ã–≤–æ–¥ —Ç–µ—Å—Ç–æ–≤:")
        print(result.stdout)
        
        if result.stderr:
            print("–û—à–∏–±–∫–∏:")
            print(result.stderr)
            
        if result.returncode == 0:
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
            
        return result.returncode == 0
        
    except FileNotFoundError:
        print("‚ùå pytest –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pytest")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
        return False


def run_interactive_mode(knowledge_processor, query_processor, config):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å RAG —Å–∏—Å—Ç–µ–º–æ–π"""
    print("\n" + "="*60)
    print("ü§ñ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú RAG –°–ò–°–¢–ï–ú–´")
    print("="*60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
    qa_file_path = config['data']['qa_file_path']
    vector_db = knowledge_processor.get_or_create_vector_database(qa_file_path)
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –±–∞–∑—É
    if not knowledge_processor.validate_vector_database(vector_db):
        print("‚ùå –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        return
        
    print("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {vector_db.get_stats()}")
    print("\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã (–∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
    print("-" * 60)
    
    while True:
        try:
            user_question = input("\nüí¨ –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
            
            if user_question.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit', '']:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            result = query_processor.process_query(user_question, vector_db)
            
            print(f"\nü§ñ –û—Ç–≤–µ—Ç: {result['answer']}")
            print(f"üìà –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {result['evaluation_score']:.1f}/10")
            
            if result.get('relevant_documents'):
                print(f"üìö –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(result['relevant_documents'])}")
                
            if not result['success']:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        except KeyboardInterrupt:
            print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


def run_batch_test(knowledge_processor, query_processor, config):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞–∫–µ—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "="*60)
    print("üî¨ –†–ï–ñ–ò–ú –ü–ê–ö–ï–¢–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
    qa_file_path = config['data']['qa_file_path']
    qa_data = knowledge_processor.load_qa_data(qa_file_path)
    vector_db = knowledge_processor.get_or_create_vector_database(qa_file_path)
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_questions = [item['question'] for item in qa_data[:5]]
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(test_questions)} –≤–æ–ø—Ä–æ—Å–∞—Ö...")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–∞–∫–µ—Ç–æ–º
    results = query_processor.batch_process_queries(test_questions, vector_db)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("-" * 60)
    
    for i, result in enumerate(results, 1):
        status = "‚úÖ" if result['success'] else "‚ùå"
        score = result['evaluation_score']
        
        print(f"\n{status} –¢–ï–°–¢ {i}")
        print(f"–í–æ–ø—Ä–æ—Å: {result['question']}")
        print(f"–û—Ç–≤–µ—Ç: {result['answer'][:100]}...")
        print(f"–û—Ü–µ–Ω–∫–∞: {score:.1f}/10")
        
    # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = query_processor.get_processing_stats(results)
    print("\n" + "="*60)
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*60)
    print(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_queries']}")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_queries']}")
    print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['failed_queries']}")
    print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1%}")
    print(f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['average_evaluation_score']:.1f}/10")
    print(f"–î–∏–∞–ø–∞–∑–æ–Ω –æ—Ü–µ–Ω–æ–∫: {stats['min_evaluation_score']:.1f} - {stats['max_evaluation_score']:.1f}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='RAG —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞')
    parser.add_argument('--config', '-c', default='config/config.yaml', 
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--rebuild', '-r', action='store_true',
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É')
    parser.add_argument('--test', '-t', action='store_true',
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã')
    parser.add_argument('--batch', '-b', action='store_true',
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞–∫–µ—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
    parser.add_argument('--interactive', '-i', action='store_true',
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º')
    
    args = parser.parse_args()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ RAG —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞")
    print("=" * 50)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ {args.config}")
        config = load_config(args.config)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        setup_logging(config)
        logging.info("RAG —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if args.test:
            success = run_tests()
            if not success:
                print("‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
                return 1
                
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã...")
        knowledge_processor = KnowledgeProcessor(config)
        query_processor = QueryProcessor(config)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
        if args.rebuild:
            print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã...")
            qa_file_path = config['data']['qa_file_path']
            vector_db = knowledge_processor.get_or_create_vector_database(
                qa_file_path, force_rebuild=True
            )
            print("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞")
            
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if args.batch:
            run_batch_test(knowledge_processor, query_processor, config)
        elif args.interactive or not any([args.test, args.batch]):
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            run_interactive_mode(knowledge_processor, query_processor, config)
            
        logging.info("RAG —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É")
        print("\n‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return 0
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code) 